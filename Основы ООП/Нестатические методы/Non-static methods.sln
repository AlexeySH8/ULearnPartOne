using System;
namespace GeometryTasks
{
    public class Vector
    {
        public double X, Y;

        public double GetLength()
        {
            return Geometry.GetLength(this);
        }

        public Vector Add(Vector vector)
        {
            return Geometry.Add(this, vector);
        }

        public bool Belongs(Segment segment)
        {
            return Geometry.IsVectorInSegment(this, segment);
        }
    }

    public class Segment
    {
        public Vector Begin, End;

        public double GetLength()
        {
            return Geometry.GetLength(this);
        }

        public bool Contains(Vector vector)
        {
            return Geometry.IsVectorInSegment(vector, this);
        }
    }

    public class Geometry
    {
        public static double GetLength(Vector vector)
        {
            return Math.Sqrt((vector.X * vector.X) + (vector.Y * vector.Y));
        }

        public static Vector Add(Vector vectorOne, Vector vectorTwo)
        {
            var vector = new Vector();
            vector.X = vectorOne.X + vectorTwo.X;
            vector.Y = vectorOne.Y + vectorTwo.Y;
            return vector;
        }

        public static double GetLength(Segment segment)
        {
            var x1 = segment.Begin.X;
            var y1 = segment.Begin.Y;
            var x2 = segment.End.X;
            var y2 = segment.End.Y;
            return Math.Sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
        }

        public static bool IsVectorInSegment(Vector vector, Segment segment)
        {
            var segmentLength = Geometry.GetLength(segment);
            var length1 = Math.Sqrt(((vector.X - segment.Begin.X) * (vector.X - segment.Begin.X)) +
                ((vector.Y - segment.Begin.Y) * (vector.Y - segment.Begin.Y)));

            var length2 = Math.Sqrt(((vector.X - segment.End.X) * (vector.X - segment.End.X)) +
                ((vector.Y - segment.End.Y) * (vector.Y - segment.End.Y)));

            return AlmostEqual((length2 + length1), segmentLength);
        }

        public static bool AlmostEqual(double a, double b)
        {
            const double epsilon = 0.1;
            return Math.Abs(a - b) < epsilon;
        }
    }
}
